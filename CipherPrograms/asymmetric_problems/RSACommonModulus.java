import java.math.BigInteger; 

public class RSACommonModulus{

   public static void main(final String[] args) {
      BigInteger e1 = new BigInteger("42083779332676427966910416029044503249234002404965102741581811832976386239739752688618348689266907937020722507925993471671212409478550018268287146888515772274767144739247710550528569017436006558446385365611367717288424091251150568558691582242912433884704418366690058623121582246236808723934969735494657796740");
      BigInteger e2 = new BigInteger("11465772377570286694382246816625476738201200795845267261135511809373391783382720982089757634759313680052052867282044008357454317160195869712056220352524523802383088274413062061999321668276377576527384627925749615511701316226042827607865806048634294551342785755932989749422052336873581883045465471857908425773");
      BigInteger c2 = new BigInteger("2491698195713467900888976875413060247946636323137897176482583785896008595897051703765939001785290077584805295070483628879834609095502702508302884558824130206058331703208888814704151923728463743126735411503024803375943986809688212560962973952710343551561868158566065312941039381127856820593251128028531959811362750117813060695530230905662964337427400997099893733932383331656244836128611743442210742883839953648922870468253648969044231994191535430057817300418244359707986876314907598737571211744059355078366506850944474674925114588009730178583732653213488960245910218885542087284313608449454393060665808100702301106447");
      //BigInteger c1 = new BigInteger("32");
      //BigInteger e1 = new BigInteger("9");
      //BigInteger e2 = new BigInteger("13");
      //BigInteger N = new BigInteger("179");
      BigInteger c1 = new BigInteger("11457241430162538816368963012260754361346364396399801307514487573430399375642455091247949309203078555830186753119889414387221332411372451126304186673124104825604709274929238536212945553750655070221564228263029459651539219588457953228491226925179865482194692891289626478948796495824091818678199854918096294503647618085622652858388749289538238601682919988224538259121373041392448683081708210223366360660456815071575174272385315755942473563437132583983236433354897593005645876387898849729949820144258377883721726621492170622186633754267576414149848827456563145138916757291952210502906873456362167104433821957397328913779");
      BigInteger N = new BigInteger("15148863832521289817766690226868189186772547845519481585341691263157792819729209667006815431699227957283612974727566891416159625403011562033053093332518613305793253211249445403989676278180194766531833036751939027666176524019577113830195122537532493982209245685276167485606828194600673901603680990781890626948726957270040064996664657131638607011131541255381856651672255519400211233839572219851036937871433763510377075989765205764985157234437686967460875116531175739560269439042262452967074113160571783613051518454503028267017930949627862088376078665516948197430832869594652796654825497042734868489079299196472563685137");
      System.out.println("eea(  ,  ) = " + apply(e1, e2));
      Triple sol = apply(e1,e2);
      //BigInteger i = c1.modInverse(N);
      BigInteger i = c2.modInverse(N);
      //System.out.println("i is: "+ i);
      //BigInteger power1 = powMine(i, sol.s.multiply(new BigInteger("-1")));
      //BigInteger power1 = i.pow(sol.s.intValue()*-1);
      //System.out.println("power1 is: "+ power1);
      //BigInteger power2 = c2.pow(sol.t.intValue());
      //System.out.println("power2 is: "+ power2);
      
      BigInteger M= i.modPow( sol.t.multiply(new BigInteger("-1")), N).multiply(c1.modPow(sol.s, N)).mod(N);
      //BigInteger M = (power1.multiply(power2)).mod(N);
      System.out.println(M);
   }

   /*
    * extended_euclid(d,s)
         if s = 0
             than return (d,1,0)
         (d',s',t') <-- extended_euclid(s, d mod s)
         return (d',t',s' - (d div s)t')
    */
   public static Triple apply(final BigInteger a, final BigInteger b) {
       if (b.equals(BigInteger.ZERO)) {
           return new Triple(a, BigInteger.ONE, BigInteger.ZERO);
       } else {
           final Triple extension = apply(b, a.mod(b));
           return new Triple(extension.d, extension.t, extension.s.subtract(a.divide(b).multiply(extension.t)));
       }
   }


   private static class Triple {
       public final BigInteger d;
       public final BigInteger s;
       public final BigInteger t;
       private Triple(final BigInteger d, final BigInteger s, final BigInteger t) {
           this.d = d;
           this.s = s;
           this.t = t;
       }
       @Override
       public String toString() {
           return "Triple{" +
                   "d=" + d +
                   ", s=" + s +
                   ", t=" + t +
                   '}';
       }
   }
}