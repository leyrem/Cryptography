import java.math.BigInteger; 

public class RSACommonModulus{
   public static BigInteger powMine(BigInteger base, BigInteger exponent) {
      BigInteger result = BigInteger.ONE;
      while (exponent.signum() > 0) {
        if (exponent.testBit(0)) result = result.multiply(base);
        base = base.multiply(base);
        exponent = exponent.shiftRight(1);
      }
      return result;
    }
   public static void main(final String[] args) {
      BigInteger e1 = new BigInteger("19817500773778281925201691698165413147922264683257704950804178124522771592405684915213592708570599022816884438936991774521849544099054862083346071952539520991925244000042254686793435404201496649103851303890141449011385383228138019909693486471014798489356916647025703718265998353738729880525790124510168731887");
      BigInteger e2 = new BigInteger("34835484815992364336889306651817232549388825051632468670819705504079450294514119861972903365282753623795909360802536112094086684963461253986664021465873188962351760534547585183910554192773270028646080888140344484004885510107954912657531025280959721558616894735679670316424425581111697124456915198007332397439");
      BigInteger c2 = new BigInteger("10141384996419680765230114403339151762322159501281163116277111953513290382531393507907594878639881046279744353663705128056689408634296403888538827971576044337581753590988958065835161651879933863574601187418189988140533324377716809396291614689874369448601234125993358853847734519370563585663488081266556449881298336138516541497768927251687546209427674103001843142129771707977354648629904169572721897096668442966754222529679722049506175128562736139655392753671944377364038826544338929400586733628875369486482612918976008697359054410440438155180069222346820197301383751867666944820892649214642023473142546640096539892188");
      //BigInteger c2 = new BigInteger("127");
      //BigInteger c1 = new BigInteger("32");
      //BigInteger e1 = new BigInteger("9");
      //BigInteger e2 = new BigInteger("13");
      //BigInteger N = new BigInteger("179");
      BigInteger c1 = new BigInteger("202691084549420058779161823109812712948794058173381776823168396906134540569686574435992502823699869166403556467307303827282430473463879968031557698016485164575126261065963820521615490169741702700362273245916734653508975462058480837288351695429082691160772893164790368550313979822081193979848749606136364978349239445344422987649206383798689155409013496899542557550697160021928441033142486286164544975775428004777547304180741590422817909017790225472238482856982032212701760699106624498790307217580925108577502396833082949332450900449797302713577339674962043185810393654362461149379902080601047876529394274940417444770");
      BigInteger N = new BigInteger("11499856539308378874042056266325880107110570071640847260691923620212321518267062817385765282677772698384875884017723852634444073421300059171317556353224503767682813497146264528904323795946243622119701272507612592311965229505530084858634693781265210907293332112798265907048612644343184614294926193036993948759624594940836893701671762641671881380972174207486619526328522492403643857817037394534862635460263104542355583889599561312016094248754809565197849234063209109412343890265432807351300757011883772880824054961089509052869975404592626956335517528494637064841097946182943648330109372257291916010135045200466754111699");
      System.out.println("eea(  ,  ) = " + apply(e1, e2));
      Triple sol = apply(e1,e2);
      BigInteger i = c1.modInverse(N);
      //BigInteger i = c2.modInverse(N);
      System.out.println("i is: "+ i);
      //BigInteger power1 = powMine(i, sol.s.multiply(new BigInteger("-1")));
      //BigInteger power1 = i.pow(sol.s.intValue()*-1);
      //System.out.println("power1 is: "+ power1);
      //BigInteger power2 = c2.pow(sol.t.intValue());
      //System.out.println("power2 is: "+ power2);
      BigInteger M= i.modPow( sol.s.multiply(new BigInteger("-1")), N).multiply(c2.modPow(sol.t, N)).mod(N);
      //BigInteger M = (power1.multiply(power2)).mod(N);
      System.out.println(M);
   }

   /*
    * extended_euclid(d,s)
         if s = 0
             than return (d,1,0)
         (d',s',t') <-- extended_euclid(s, d mod s)
         return (d',t',s' - (d div s)t')
    */
   public static Triple apply(final BigInteger a, final BigInteger b) {
       if (b.equals(BigInteger.ZERO)) {
           return new Triple(a, BigInteger.ONE, BigInteger.ZERO);
       } else {
           final Triple extension = apply(b, a.mod(b));
           return new Triple(extension.d, extension.t, extension.s.subtract(a.divide(b).multiply(extension.t)));
       }
   }


   private static class Triple {
       public final BigInteger d;
       public final BigInteger s;
       public final BigInteger t;
       private Triple(final BigInteger d, final BigInteger s, final BigInteger t) {
           this.d = d;
           this.s = s;
           this.t = t;
       }
       @Override
       public String toString() {
           return "Triple{" +
                   "d=" + d +
                   ", s=" + s +
                   ", t=" + t +
                   '}';
       }
   }
}